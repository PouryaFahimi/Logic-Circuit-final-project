$date
	Fri Dec 27 23:52:52 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Capacity_tb $end
$var wire 3 ! out [2:0] $end
$var reg 4 " in [3:0] $end
$scope module UUT $end
$var wire 4 # in [3:0] $end
$var reg 3 $ out [2:0] $end
$var integer 32 % i [31:0] $end
$upscope $end
$upscope $end
$scope module FSM_tb $end
$var wire 4 & state [3:0] $end
$var wire 1 ' door_open_pulse $end
$var reg 1 ( clk $end
$var reg 4 ) in [3:0] $end
$scope module UUT $end
$var wire 1 ( clk $end
$var wire 4 * in [3:0] $end
$var reg 1 ' door_open_pulse $end
$var reg 4 + next_state [3:0] $end
$var reg 4 , state [3:0] $end
$upscope $end
$upscope $end
$scope module Full_Light_tb $end
$var wire 1 - pulse $end
$var reg 1 . clk $end
$var reg 1 / ent $end
$var reg 1 0 ext $end
$var reg 4 1 in [3:0] $end
$scope module UUT $end
$var wire 1 . clk $end
$var wire 1 / enter_sensor $end
$var wire 1 0 exit_sensor $end
$var wire 4 2 fsm_state [3:0] $end
$var reg 1 3 enter_sensor_prev $end
$var reg 1 - pulse $end
$upscope $end
$upscope $end
$scope module Location_tb $end
$var wire 3 4 encoded [2:0] $end
$var reg 4 5 in [3:0] $end
$scope module UUT $end
$var wire 1 6 and0 $end
$var wire 1 7 and1 $end
$var wire 1 8 and2 $end
$var wire 4 9 in [3:0] $end
$var wire 1 : not_in0 $end
$var wire 1 ; not_in1 $end
$var wire 1 < not_in2 $end
$var wire 1 = not_in3 $end
$var wire 3 > encoded [2:0] $end
$upscope $end
$upscope $end
$scope module ReadWrite_tb $end
$var wire 4 ? state [3:0] $end
$var wire 1 @ open $end
$var wire 1 A full $end
$var wire 3 B capacity [2:0] $end
$var wire 3 C best_place [2:0] $end
$var reg 1 D clk $end
$var reg 1 E entry $end
$var reg 1 F exit $end
$var reg 2 G switch [1:0] $end
$var integer 32 H file [31:0] $end
$var integer 32 I file_out [31:0] $end
$var integer 32 J status [31:0] $end
$scope module UUT $end
$var wire 1 D clk $end
$var wire 1 E entry_sensor $end
$var wire 1 F exit_sensor $end
$var wire 1 A full_light $end
$var wire 1 K full_temp $end
$var wire 2 L switch [1:0] $end
$var wire 4 M state [3:0] $end
$var wire 4 N parking_slots [3:0] $end
$var wire 1 @ door_open_light $end
$var wire 3 O capacity [2:0] $end
$var wire 3 P best_place [2:0] $end
$scope module cap $end
$var wire 4 Q in [3:0] $end
$var reg 3 R out [2:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module fsm $end
$var wire 1 D clk $end
$var wire 4 T in [3:0] $end
$var reg 1 @ door_open_pulse $end
$var reg 4 U next_state [3:0] $end
$var reg 4 V state [3:0] $end
$upscope $end
$scope module loc $end
$var wire 1 W and0 $end
$var wire 1 X and1 $end
$var wire 1 Y and2 $end
$var wire 4 Z in [3:0] $end
$var wire 1 [ not_in0 $end
$var wire 1 \ not_in1 $end
$var wire 1 ] not_in2 $end
$var wire 1 ^ not_in3 $end
$var wire 3 _ encoded [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 _
1^
1]
1\
1[
b0 Z
0Y
0X
0W
b0 V
bx U
b0 T
b100 S
b100 R
b0 Q
b0 P
b100 O
b0 N
b0 M
b0 L
0K
b100 J
b10000000000000000000000000000100 I
b10000000000000000000000000000011 H
b0 G
0F
0E
0D
b0 C
b100 B
xA
0@
b0 ?
b1 >
1=
1<
1;
0:
b1 9
08
07
16
b1 5
b1 4
03
b1 2
b1 1
00
0/
0.
0-
b0 ,
bx +
b0 *
b0 )
0(
0'
b0 &
b100 %
b11 $
b1 #
b1 "
b11 !
$end
#50000
b0 U
b0 +
0A
1D
1.
1(
#100000
b0 4
b0 >
1:
06
b100 %
b100 !
b100 $
0D
0.
0(
b1000 T
1E
b0 5
b0 9
1/
b0 1
b0 2
b1000 )
b1000 *
b0 "
b0 #
#150000
b1 C
b1 P
b1 _
0[
1W
b1 ?
b1 N
b100 S
b11 B
b11 O
b11 R
b1 M
b1 Q
b1 V
b1 Z
1@
13
b1 &
b1 ,
1'
b1 U
b1 +
1D
1.
1(
#200000
0<
b100 %
b11 !
b11 $
0D
0.
0(
b1001 T
b1 G
b1 L
b100 5
b100 9
b1111 1
b1111 2
b100 )
b100 *
b100 "
b100 #
#250000
0W
b10 C
b10 P
b10 _
0\
1X
b11 ?
b11 N
b100 S
b10 B
b10 O
b10 R
b11 M
b11 Q
b11 V
b11 Z
b0 &
b0 ,
b11 U
b0 +
1D
1.
1(
#300000
0=
1<
0;
b100 %
b10 !
b10 $
0D
0.
0(
b1 T
0E
b1010 5
b1010 9
b1010 1
b1010 2
b1000 )
b1000 *
b1010 "
b1010 #
#350000
0@
b1 &
b1 ,
b1 +
1D
1.
1(
#400000
0<
0:
07
b101 4
b101 >
b100 %
b0 !
b0 $
0D
0.
0(
b11 G
b11 L
b1011 T
1E
b1111 5
b1111 9
b1111 1
b1111 2
b1111 "
b1111 #
#450000
0X
b11 C
b11 P
b11 _
0]
1Y
b111 ?
b111 N
b100 S
b1 B
b1 O
b1 R
b111 M
b111 Q
b111 V
b111 Z
1@
b11 &
b11 ,
b111 U
b11 +
1D
1.
1(
#500000
1:
b0 4
b0 >
b1 !
b1 $
b100 %
0D
0.
0(
b1 G
b1 L
1F
b101 T
0E
b1110 5
b1110 9
0/
b1110 "
b1110 #
#550000
1W
b1 C
b1 P
b1 _
1\
0Y
b101 ?
b101 N
b100 S
b10 B
b10 O
b10 R
b101 M
b101 Q
b101 V
b101 Z
03
b111 &
b111 ,
b101 U
b111 +
1D
1.
1(
#600000
b11 4
b11 >
18
1=
0:
0D
0.
0(
b0 G
b0 L
0F
b1000 T
1E
b111 5
b111 9
1/
#650000
0W
b11 C
b11 P
b11 _
0\
1Y
b111 ?
b111 N
b100 S
b1 B
b1 O
b1 R
b111 M
b111 Q
b111 V
b111 Z
13
1-
b1111 &
b1111 ,
b111 U
b1111 +
1D
1.
1(
#700000
0D
0.
0(
1F
b100 T
0E
b1100 1
b1100 2
#750000
b0 C
b0 P
b0 _
1[
0Y
b110 ?
b110 N
b100 S
b10 B
b10 O
b10 R
b110 M
b110 Q
b110 V
b110 Z
0-
0'
b110 U
1D
1.
1(
#800000
0D
0.
0(
0/
b1101 1
b1101 2
#850000
0@
03
1D
1.
1(
#900000
0D
0.
0(
b1 G
b1 L
0F
b1001 T
1E
1/
b1111 1
b1111 2
#950000
b11 C
b11 P
b11 _
0[
1Y
b111 ?
b111 N
b100 S
b1 B
b1 O
b1 R
b111 M
b111 Q
b111 V
b111 Z
1@
13
1-
b111 U
1D
1.
1(
#1000000
0D
0.
0(
b1000 T
b0 G
b0 L
#1050000
0Y
0^
b101 C
b101 P
b101 _
1K
b1111 ?
b1111 N
b100 S
b0 B
b0 O
b0 R
b1111 M
b1111 Q
b1111 V
b1111 Z
0-
b1111 U
1D
1.
1(
#1100000
1A
0D
0.
0(
b1011 T
b11 G
b11 L
#1150000
0@
1D
1.
1(
#1200000
0D
0.
0(
b1000 T
b0 G
b0 L
#1250000
1D
1.
1(
#1300000
0D
0.
0(
b0 T
0E
#1350000
0A
1D
1.
1(
#1400000
0D
0.
0(
b100 T
1F
#1450000
1[
b0 C
b0 P
b0 _
0K
b1110 ?
b1110 N
b1 B
b1 O
b1 R
b100 S
b1110 M
b1110 Q
b1110 V
b1110 Z
1@
b1110 U
1D
1.
1(
#1500000
0D
0.
0(
b11 G
b11 L
b11 T
0F
#1550000
0@
1D
1.
1(
#1600000
0D
0.
0(
b10 G
b10 L
b110 T
1F
#1650000
1]
b1010 ?
b1010 N
b100 S
b10 B
b10 O
b10 R
b1010 M
b1010 Q
b1010 V
b1010 Z
1@
b1010 U
1D
1.
1(
#1700000
0D
0.
0(
b111 T
b11 G
b11 L
#1750000
1^
b10 ?
b10 N
b100 S
b11 B
b11 O
b11 R
b10 M
b10 Q
b10 V
b10 Z
b10 U
1D
1.
1(
#1800000
0D
0.
0(
b101 T
b1 G
b1 L
#1850000
1\
b0 ?
b0 N
b100 S
b100 B
b100 O
b100 R
b0 M
b0 Q
b0 V
b0 Z
b0 U
1D
1.
1(
#1900000
0D
0.
0(
b0 G
b0 L
b0 T
0F
#1950000
0@
1D
1.
1(
#2000000
0D
0.
0(
#2050000
1D
1.
1(
#2100000
0D
0.
0(
#2150000
1D
1.
1(
#2200000
0D
0.
0(
